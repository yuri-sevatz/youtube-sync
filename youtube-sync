#!/usr/bin/env python2.7

from __future__ import unicode_literals

import argparse
import json
import os
import sys
import youtube_sync

from datetime import timedelta

class MyLogger(object):
    @staticmethod
    def debug(msg):
        sys.stderr.write(msg)
        sys.stderr.write('\n')

    @staticmethod
    def warning(msg):
        sys.stderr.write(msg)
        sys.stderr.write('\n')

    @staticmethod
    def error(msg):
        sys.stderr.write(msg)
        sys.stderr.write('\n')

log = MyLogger()

def error(msg):
    log.error('>>> ERROR: ' + msg)

parser = argparse.ArgumentParser(
    description='SyncDB Shell Tool',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)

parser.add_argument(
    'path',
    action='store',
    help='Database Path',
    default=None
)

parser.add_argument(
    'action',
    action='store',
    help='Action',
    choices=['create', 'add', 'remove', 'sources', 'videos', 'status', 'sync', 'get', 'input', 'output', 'query'],
)

parser.add_argument(
    'url',
    action='store',
    nargs='?',
    help='Unique Url',
    default=None
)

parser.add_argument(
    '-o',
    '--output',
    action='store',
    nargs='?',
    help='Output template',
    default='%(extractor)s/%(uploader)s/%(title)s-%(id)s.%(ext)s'
)

parser.add_argument(
    '-f',
    '--fetch',
    action='store_true',
    required=False,
    help='Fetch sources',
)

parser.add_argument(
    '-d',
    '--download',
    action='store_true',
    required=False,
    help='Download videos',
)

if len(sys.argv) < 2:
    parser.print_help()
    sys.exit(0)

args = parser.parse_args()

'''
if not args.path and args.action in ['add', 'update', 'remove', 'sources', 'videos', 'status', 'sync', 'get']:
    error('Missing argument - path (-p)')
    sys.exit(1)
'''
if not args.url and args.action in ['add', 'remove', 'input', 'output', 'query', 'get']:
    error('Missing argument - [url]')
    sys.exit(1)

if args.action == 'sync' and not (args.fetch or args.download):
    error('Must specify at least one of [fetch|download] with sync (-f, -d)')
    sys.exit(1)

""" Prepare the database """
db = youtube_sync.Database('sqlite:///' + os.path.expanduser(args.path), log, echo=False)

""" Client controls sync parameters """
ydl_opts = {
    'outtmpl': args.output,
    'logger': log,
    'extract_flat': 'in_playlist',
    'usenetrc': True,
}

if args.action == 'add':
    if not db.add(args.url, timedelta(days=1)):
        error('Record already exists')
        exit(1)
elif args.action == 'remove':
    if not db.remove(args.url):
        error('No records found')
        exit(1)
elif args.action == 'sources':
    for source in db.sources():
        print(source)
elif args.action == 'videos':
    for video in db.videos():
        print(video)
elif args.action == 'status':
    for status in db.status():
        print(status)
elif args.action == 'input':
    print(db.input(args.url))
elif args.action == 'output':
    print(db.output(args.url))
elif args.action == 'query':
    for item in db.query(args.url, ydl_opts):
        print(json.dumps(item, ensure_ascii=False).encode('utf8'))
elif args.action == 'sync':
    db.sync(ydl_opts, url=args.url, fetch=args.fetch, download=args.download)
elif args.action == 'get':
    db.get(ydl_opts, args.url)