#!/usr/bin/env python3

from __future__ import unicode_literals

import argparse
import os
import sys

from datetime import timedelta
from youtube_sync.ytsync import YoutubeSync


class Colors:
    NONE = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    HEADER = '\033[95m'


def error(msg):
    sys.stderr.write('>>> ERROR: ')
    sys.stderr.write(msg)
    sys.stderr.write('\n')


parser = argparse.ArgumentParser(
    description='SyncDB Shell Tool',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)

parser.add_argument(
    '-p',
    '--path',
    action='store',
    help='Database Path',
    default=None
)

parser.add_argument(
    'action',
    action='store',
    help='Action',
    choices=[
        'init',
        'add',
        'remove',
        'sources',
        'videos',
        'parents',
        'children',
        'status',
        'fetch',
        'sync',
        'enable',
        'disable',
    ],
)

parser.add_argument(
    'url',
    action='store',
    nargs='?',
    help='Unique Url',
    default=None,
)

parser.add_argument(
    '-o',
    '--output',
    action='store',
    nargs='?',
    help='Output template',
    default='',
)

parser.add_argument(
    '-n',
    '--netrc',
    action='store_true',
    required=False,
    help='Use .netrc authentication data',
)

parser.add_argument(
    '--cookies',
    action='store',
    nargs='?',
    help='File to read cookies from and dump cookie jar in',
    default=None,
)

parser.add_argument(
    '-f',
    '--force',
    action='store_true',
    required=False,
    help='Force Update',
)

if len(sys.argv) < 2:
    parser.print_help()
    sys.exit(0)

args = parser.parse_args()


def find_parent_with_file(path, filename):
    while not os.path.isfile(os.path.join(path, filename)):
        candidate = os.path.dirname(path)
        if candidate == path:
            return None
        path = candidate
    return path


file = '.ytsync.db'
path = os.path.expanduser(args.path) if args.path is not None else find_parent_with_file(os.getcwd(), file)

if path is None and args.action != 'init':
    error('Must specify a sync path (-p), or cwd must reside in a sync path')
    sys.exit(1)
elif path and args.action == 'init':
    error('Database already in path')
    sys.exit(1)
elif path:
    os.chdir(path)

if not args.url and args.action in [
    'add',
    'remove',
    'parents',
    'children',
    'enable',
    'disable',
]:
    error('Missing argument - [url]')
    sys.exit(1)

""" Prepare the database """
params={
    'outtmpl': u'%(extractor)s/%(uploader)s/%(title)s-%(id)s.%(ext)s',
    'extract_flat': 'in_playlist',
    'sleep_interval': 10,
    'logtostderr': True,

    'quiet': True,
}

if args.cookies:
    params['cookiefile'] = args.cookies

if args.netrc:
    params['usenetrc'] = True

ytsync = YoutubeSync('sqlite:///' + file, params=params)

if args.action == 'add':
    if not ytsync.add(args.url, timedelta(days=1)):
        error('Record already exists')
        exit(1)
elif args.action == 'remove':
    if not ytsync.remove(args.url):
        error('No records found')
        exit(1)
elif args.action == 'sources':
    for source in ytsync.sources(args.url if args.url else None):
        print(source.url)
elif args.action == 'videos':
    for video in ytsync.videos(args.url if args.url else None):
        print(video.extractor_key + ' ' + video.extractor_data)
elif args.action == 'parents':
    for video in ytsync.videos(args.url):
        for source in video.sources:
            print(source.url)
elif args.action == 'children':
    for source in ytsync.sources(args.url):
        for video in source.videos:
            print(video.extractor_key + ' ' + video.extractor_data)
elif args.action == 'status':
    sys.stderr.write("\n" + ('Sources' if not args.url else ('Sources for ' + args.url)) + ':' + "\n")
    for source in ytsync.sources(args.url if args.url else None):
        saved = source.videos_saved()
        total = source.videos_total()
        known = source.prev is not None
        allow = source.allow
        color = Colors.HEADER if not allow \
            else Colors.BLUE if not known \
            else Colors.YELLOW if saved < total \
            else Colors.GREEN if total > 0 \
            else Colors.RED
        sys.stderr.write('[ ' + (
            color + Colors.BOLD + '{:^3}'.format(
                str(saved)
            ) + Colors.NONE + ' of ' +
            color + Colors.BOLD + '{:^3}'.format(
                str(total) if known else '?'
            )
        ) + Colors.NONE + ' ]' + ' ' + source.url + "\n")
        if args.url is not None:
            for video in source.videos:
                print(video.extractor_key + ' ' + video.extractor_data)
    sys.stderr.write("\n" + ('Videos' if not args.url else ('Videos for ' + args.url)) + ':' + "\n")
    for video in ytsync.videos(args.url if args.url else None):
        allow = video.allow
        saved = 1 if video.prev else 0
        color = Colors.HEADER if not allow \
            else Colors.YELLOW if saved \
            else Colors.GREEN
        sys.stderr.write('[ ' + (
            color + Colors.BOLD + '{:^3}'.format(
                str(saved)
            ) + Colors.NONE + ' of ' +
            color + Colors.BOLD + '{:^3}'.format(
                str(1)
            )
        ) + Colors.NONE + ' ]' + ' ' + video.extractor_key + ' ' + video.extractor_data + "\n")
        if args.url is not None:
            for source in video.sources:
                print(source.url)
elif args.action == 'fetch':
    ytsync.fetch(url=args.url, force=args.force)
elif args.action == 'sync':
    ytsync.sync(url=args.url, force=args.force)
elif args.action == 'enable':
    if not ytsync.enable(url=args.url):
        error('No records found')
        exit(1)
elif args.action == 'disable':
    if not ytsync.disable(url=args.url):
        error('No records found')
        exit(1)
