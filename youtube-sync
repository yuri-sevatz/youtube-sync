#!/usr/bin/env python2.7

from __future__ import unicode_literals

import argparse
import json
import os
import sys
import youtube_sync

from datetime import timedelta


class MyLogger(object):
    @staticmethod
    def debug(msg):
        sys.stderr.write(msg)
        sys.stderr.write('\n')

    @staticmethod
    def warning(msg):
        sys.stderr.write(msg)
        sys.stderr.write('\n')

    @staticmethod
    def error(msg):
        sys.stderr.write(msg)
        sys.stderr.write('\n')

log = MyLogger()


def error(msg):
    log.error('>>> ERROR: ' + msg)

parser = argparse.ArgumentParser(
    description='SyncDB Shell Tool',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)


parser.add_argument(
    '-p',
    '--path',
    action='store',
    help='Database Path',
    default=None
)

parser.add_argument(
    'action',
    action='store',
    help='Action',
    choices=[
        'create',
        'add',
        'remove',
        'sources',
        'videos',
        'status',
        'sync',
        'get',
        'queue',
        'enable',
        'disable',
        'purge',
        'input',
        'output',
        'query',
    ],
)

parser.add_argument(
    'url',
    action='store',
    nargs='?',
    help='Unique Url',
    default=None
)

parser.add_argument(
    '-o',
    '--output',
    action='store',
    nargs='?',
    help='Output template',
    default='%(extractor)s/%(uploader)s/%(title)s-%(id)s.%(ext)s'
)

parser.add_argument(
    '-u',
    '--update',
    action='store_true',
    required=False,
    help='Update sources',
)

parser.add_argument(
    '-d',
    '--download',
    action='store_true',
    required=False,
    help='Download videos',
)

parser.add_argument(
    '-f',
    '--force',
    action='store_true',
    required=False,
    help='Force Update',
)

if len(sys.argv) < 2:
    parser.print_help()
    sys.exit(0)

args = parser.parse_args()


def find_parent_with_file(path, filename):
    while not os.path.isfile(os.path.join(path, filename)):
        candidate = os.path.dirname(path)
        if candidate == path:
            return None
        path = candidate
    return path

file = '.ytsync.db'
path = os.path.expanduser(args.path) if args.path is not None else find_parent_with_file(os.getcwd(), file)
if path is None:
    error('Must specify a sync path (-p), or cwd must reside in a sync path')
    sys.exit(1)
else:
    os.chdir(path)

if not args.url and args.action in [
    'add',
    'remove',
    'input',
    'output',
    'query',
    'get',
    'queue',
    'enable',
    'disable',
    'purge',
]:
    error('Missing argument - [url]')
    sys.exit(1)

if args.action == 'sync' and not (args.update or args.download):
    error('Must specify at least one of [update|download] with sync (-u, -d)')
    sys.exit(1)

""" Prepare the database """
db = youtube_sync.Database('sqlite:///' + file, log, echo=False)

""" Client controls sync parameters """
ydl_opts = {
    'outtmpl': args.output,
    'logger': log,
    'extract_flat': 'in_playlist',
    'usenetrc': True,
}

if args.action == 'add':
    if not db.add(args.url, timedelta(days=1)):
        error('Record already exists')
        exit(1)
elif args.action == 'remove':
    if not db.remove(args.url):
        error('No records found')
        exit(1)
elif args.action == 'sources':
    for source in db.sources():
        print(source)
elif args.action == 'videos':
    for video in db.videos():
        print(video)
elif args.action == 'status':
    for status in db.status(args.url if args.url else None):
        print(status)
elif args.action == 'input':
    print(db.input(args.url))
elif args.action == 'output':
    print(db.output(args.url))
elif args.action == 'query':
    for item in db.query(args.url, ydl_opts):
        print(json.dumps(item, ensure_ascii=False).encode('utf8'))
elif args.action == 'sync':
    db.sync(ydl_opts, url=args.url, update=args.update, download=args.download, force=args.force)
elif args.action == 'get':
    db.get(ydl_opts, args.url)
elif args.action == 'queue':
    db.queue(ydl_opts, args.url)
elif args.action == 'enable':
    if not db.enable(args.url):
        error('No records found')
        exit(1)
elif args.action == 'disable':
    if not db.disable(args.url):
        error('No records found')
        exit(1)
elif args.action == 'purge':
    if not db.purge(args.url):
        error('No records found')
        exit(1)
